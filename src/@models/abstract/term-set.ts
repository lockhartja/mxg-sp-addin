import { SpTermStores } from '@atypes';
import { BzDataProp, BzEntity, BzNavProp, BzEntityKey } from '@models/decorator';
import { AutoGeneratedKeyType, DataType } from 'breeze-client';
import { RootTermStore } from './root-term-store';
import { SpEntityBase } from './sp-entity-base';

@BzEntity
@BzEntityKey(AutoGeneratedKeyType.None)
export class TermSet extends SpEntityBase {
    readonly namespace = 'Global';
    readonly shortName = 'TermSet';

    @BzDataProp({
        isPartOfKey: true,
        isNullable: false,
        dataType: DataType.Guid,
    })
    id: string;

    labels?: string[];

    defaultLabel: string;

    isRoot: boolean;

    @BzDataProp()
    rootTermStoreId: string;

    @BzNavProp({ isScalar: true })
    rootTermStore: RootTermStore;

    parentId?: string;

    get parent(): TermSet {
        return this.entityAspect?.entityManager
            ?.getEntities(this.shortName)
            .find((entity: TermSet) => entity.id === this.parentId) as TermSet;
    }

    get children(): TermSet[] {
        return this.entityAspect?.entityManager
            ?.getEntities(this.shortName)
            .filter((entity: TermSet) => entity.parentId === this.id) as TermSet[];
    }
}
